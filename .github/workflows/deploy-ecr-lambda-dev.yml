name: Push the Docker image to AWS ECR Repo and deploy terraform to dev
on:
  push:
    branches:
      - develop

env:
  TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE}}-dev"
  CONFIG_DIRECTORY: "./infra/"

jobs:
  set-vars:
    outputs:
      repo_name: ${{ steps.repo-name.outputs.repo_name }}
    name: Setting the environment variables
    runs-on: ubuntu-latest
    steps:
      - name: Set the repository name
        id: repo-name
        run: |
          echo "repo_name=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_OUTPUT

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Run image
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 2.0.0
      - name: View poetry --help
        run: |
          poetry install --no-cache --no-root
          poetry run pytest
        
  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [set-vars, unit-tests]
    permissions:
      contents: read
      id-token: write
    outputs:
      ecr_image_tag: ${{ steps.build-image.outputs.ecr_image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ROLE_PROD }}"
          output-credentials: true
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Build, tag, and push the image to Amazon ECR
        if: ${{ vars.ECR_REPOSITORY != null }}
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.set-vars.outputs.repo_name }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo ecr_image_tag=$IMAGE_TAG >> $GITHUB_OUTPUT
          echo $IMAGE_TAG

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [build-image, set-vars]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
        env: 
          TF_VAR_ecr_image_tag: '"${{ needs.build-image.outputs.ecr_image_tag }}"'
          TF_VAR_ecr_image_repository: '"${{ needs.set-vars.outputs.repo_name }}"'

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

  terraform-aply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [build-image, terraform-plan, set-vars]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
        env: 
          TF_VAR_ecr_image_tag: '"${{ needs.build-image.outputs.ecr_image_tag }}"'
          TF_VAR_ecr_image_repository: '"${{ needs.set-vars.outputs.repo_name }}"'

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"